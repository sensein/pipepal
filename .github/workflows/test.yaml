name: Python Tests

on:
  pull_request:

jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - {os: ubuntu-latest, architecture: x64, python-version: '3.10'}
        - {os: ubuntu-latest, architecture: x64, python-version: '3.11'}
        - {os: macos-latest, architecture: arm64, python-version: '3.10'}
        - {os: macos-latest, architecture: arm64, python-version: '3.11'}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install ffmpeg (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y ffmpeg
    - name: Install ffmpeg (macOS)
      if: startsWith(matrix.os, 'macos')
      run: brew install ffmpeg
    - name: Install ffmpeg (Windows)
      if: startsWith(matrix.os, 'windows')
      run: choco install ffmpeg
    - name: Install pipx and ensure it's up to date
      run: |
        python -m pip install --upgrade pipx
        pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH # Explicitly add to PATH if not already included
      shell: bash
    - name: Install poetry
      run: pipx install poetry==1.7.1
      shell: bash
    - name: Install dependencies with Poetry
      run: |
        poetry run pip install iso-639
        poetry install --with dev
      shell: bash

  test:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - {os: ubuntu-latest, architecture: x64, python-version: '3.10', test: pytest}
        - {os: ubuntu-latest, architecture: x64, python-version: '3.10', test: mypy}
        - {os: ubuntu-latest, architecture: x64, python-version: '3.10', test: codespell}
        - {os: ubuntu-latest, architecture: x64, python-version: '3.10', test: ruff}
        - {os: ubuntu-latest, architecture: x64, python-version: '3.11', test: pytest}
        - {os: macos-latest, architecture: arm64, python-version: '3.10', test: pytest}
        - {os: macos-latest, architecture: arm64, python-version: '3.11', test: pytest}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run codespell
      if: matrix.test == 'codespell'
      run: poetry run codespell
    - name: Run unit tests
      id: run-tests
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: >
        poetry run pytest \
          --junitxml=pytest.xml \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml:coverage.xml \
          --cov=src src/tests \
          --log-level=DEBUG \
          --verbose
      shell: bash
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Run mypy
      if: matrix.test == 'mypy'
      run: poetry run mypy .
    - name: Run ruff
      if: matrix.test == 'ruff'
      uses: chartboost/ruff-action@v1
